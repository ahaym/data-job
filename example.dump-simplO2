
==================== Tidy Core ====================
2018-08-19 04:23:00.747434191 UTC

Result size of Tidy Core
  = {terms: 1,789, types: 917, coercions: 21, joins: 7/39}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$fShowGender5 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$fShowGender5 = "M"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$fShowGender4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$fShowGender4 = GHC.CString.unpackCString# Main.$fShowGender5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$fShowGender3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$fShowGender3 = "F"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$fShowGender2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$fShowGender2 = GHC.CString.unpackCString# Main.$fShowGender3

-- RHS size: {terms: 13, types: 6, coercions: 0, joins: 0/0}
Main.$fShowGender_$cshowsPrec :: Int -> Gender -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (ds1_d6Rj [Occ=Once!] :: Gender)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds1_d6Rj of {
                   M ->
                     GHC.Base.augment
                       @ Char
                       (\ (@ b_a3O8)
                          (c_a3O9 [Occ=Once, OS=OneShot] :: Char -> b_a3O8 -> b_a3O8)
                          (n_a3Oa [Occ=Once, OS=OneShot] :: b_a3O8) ->
                          GHC.Base.foldr @ Char @ b_a3O8 c_a3O9 n_a3Oa Main.$fShowGender4)
                       eta_B1;
                   F ->
                     GHC.Base.augment
                       @ Char
                       (\ (@ b_a3O8)
                          (c_a3O9 [Occ=Once, OS=OneShot] :: Char -> b_a3O8 -> b_a3O8)
                          (n_a3Oa [Occ=Once, OS=OneShot] :: b_a3O8) ->
                          GHC.Base.foldr @ Char @ b_a3O8 c_a3O9 n_a3Oa Main.$fShowGender2)
                       eta_B1
                 }}]
Main.$fShowGender_$cshowsPrec
  = \ _ [Occ=Dead] (ds1_d6Rj :: Gender) (eta_B1 :: String) ->
      case ds1_d6Rj of {
        M -> ++ @ Char Main.$fShowGender4 eta_B1;
        F -> ++ @ Char Main.$fShowGender2 eta_B1
      }

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
Main.$fShowGender_$cshow :: Gender -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a6S2 [Occ=Once!] :: Gender) ->
                 case x_a6S2 of {
                   M -> Main.$fShowGender4;
                   F -> Main.$fShowGender2
                 }}]
Main.$fShowGender_$cshow
  = \ (x_a6S2 :: Gender) ->
      case x_a6S2 of {
        M -> Main.$fShowGender4;
        F -> Main.$fShowGender2
      }

-- RHS size: {terms: 12, types: 5, coercions: 0, joins: 0/0}
Main.$fShowGender1 :: Gender -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d6Rj [Occ=Once!] :: Gender)
                 (eta_B1 [Occ=Once*] :: String) ->
                 case ds_d6Rj of {
                   M ->
                     GHC.Base.augment
                       @ Char
                       (\ (@ b_a3O8)
                          (c_a3O9 [Occ=Once, OS=OneShot] :: Char -> b_a3O8 -> b_a3O8)
                          (n_a3Oa [Occ=Once, OS=OneShot] :: b_a3O8) ->
                          GHC.Base.foldr @ Char @ b_a3O8 c_a3O9 n_a3Oa Main.$fShowGender4)
                       eta_B1;
                   F ->
                     GHC.Base.augment
                       @ Char
                       (\ (@ b_a3O8)
                          (c_a3O9 [Occ=Once, OS=OneShot] :: Char -> b_a3O8 -> b_a3O8)
                          (n_a3Oa [Occ=Once, OS=OneShot] :: b_a3O8) ->
                          GHC.Base.foldr @ Char @ b_a3O8 c_a3O9 n_a3Oa Main.$fShowGender2)
                       eta_B1
                 }}]
Main.$fShowGender1
  = \ (ds_d6Rj :: Gender) (eta_B1 :: String) ->
      case ds_d6Rj of {
        M -> ++ @ Char Main.$fShowGender4 eta_B1;
        F -> ++ @ Char Main.$fShowGender2 eta_B1
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Main.$fShowGender_$cshowList :: [Gender] -> ShowS
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Main.$fShowGender_$cshowList
  = GHC.Show.showList__ @ Gender Main.$fShowGender1

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Main.$fShowGender [InlPrag=CONLIKE] :: Show Gender
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Gender
                       Main.$fShowGender_$cshowsPrec
                       Main.$fShowGender_$cshow
                       Main.$fShowGender_$cshowList]
Main.$fShowGender
  = GHC.Show.C:Show
      @ Gender
      Main.$fShowGender_$cshowsPrec
      Main.$fShowGender_$cshow
      Main.$fShowGender_$cshowList

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$fShowPerson7 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$fShowPerson7 = GHC.Types.I# 0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$fShowPerson6 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Main.$fShowPerson6 = "Person {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$fShowPerson5 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Main.$fShowPerson5 = "height = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$fShowPerson4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Main.$fShowPerson4 = "weight = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$fShowPerson3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
Main.$fShowPerson3 = "gender = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$fShowPerson2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$fShowPerson2 = "}"#

-- RHS size: {terms: 65, types: 24, coercions: 0, joins: 0/3}
Main.$w$cshowsPrec [InlPrag=[0]]
  :: GHC.Prim.Int# -> Double -> Double -> Gender -> ShowS
[GblId,
 Arity=4,
 Str=<S,U><L,1*U(U)><L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 20 20 90] 572 120}]
Main.$w$cshowsPrec
  = \ (ww_s9lI :: GHC.Prim.Int#)
      (ww1_s9lM :: Double)
      (ww2_s9lN :: Double)
      (ww3_s9lO :: Gender) ->
      let {
        f_s8UT [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f_s8UT
          = case ww1_s9lM of { GHC.Types.D# ww5_a6Uc ->
            GHC.Float.$w$sshowSignedFloat
              GHC.Float.$fShowDouble2 Main.$fShowPerson7 ww5_a6Uc
            } } in
      let {
        f1_s8UR [Dmd=<L,C(U)>] :: String -> String
        [LclId]
        f1_s8UR
          = case ww2_s9lN of { GHC.Types.D# ww5_a6Uc ->
            GHC.Float.$w$sshowSignedFloat
              GHC.Float.$fShowDouble2 Main.$fShowPerson7 ww5_a6Uc
            } } in
      let {
        p_s8UN :: ShowS
        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []]
        p_s8UN
          = \ (x_X3NI :: String) ->
              GHC.CString.unpackAppendCString#
                Main.$fShowPerson6
                (GHC.CString.unpackAppendCString#
                   Main.$fShowPerson5
                   (f_s8UT
                      (++
                         @ Char
                         GHC.Show.showCommaSpace1
                         (GHC.CString.unpackAppendCString#
                            Main.$fShowPerson4
                            (f1_s8UR
                               (++
                                  @ Char
                                  GHC.Show.showCommaSpace1
                                  (GHC.CString.unpackAppendCString#
                                     Main.$fShowPerson3
                                     (case ww3_s9lO of {
                                        M ->
                                          ++
                                            @ Char
                                            Main.$fShowGender4
                                            (GHC.CString.unpackAppendCString#
                                               Main.$fShowPerson2 x_X3NI);
                                        F ->
                                          ++
                                            @ Char
                                            Main.$fShowGender2
                                            (GHC.CString.unpackAppendCString#
                                               Main.$fShowPerson2 x_X3NI)
                                      })))))))) } in
      case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# ww_s9lI 11#) of {
        False -> p_s8UN;
        True ->
          \ (x_a6S9 :: String) ->
            GHC.Types.:
              @ Char
              GHC.Show.$fShow(,)4
              (p_s8UN (GHC.Types.: @ Char GHC.Show.$fShow(,)2 x_a6S9))
      }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
Main.$fShowPerson_$cshowsPrec [InlPrag=INLINE[0]]
  :: Int -> Person -> ShowS
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S,1*U(1*U(U),1*U(U),U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9lE [Occ=Once!] :: Int)
                 (w1_s9lF [Occ=Once!] :: Person) ->
                 case w_s9lE of { GHC.Types.I# ww1_s9lI [Occ=Once] ->
                 case w1_s9lF of
                 { Person ww3_s9lM [Occ=Once] ww4_s9lN [Occ=Once]
                          ww5_s9lO [Occ=Once] ->
                 Main.$w$cshowsPrec ww1_s9lI ww3_s9lM ww4_s9lN ww5_s9lO
                 }
                 }}]
Main.$fShowPerson_$cshowsPrec
  = \ (w_s9lE :: Int) (w1_s9lF :: Person) ->
      case w_s9lE of { GHC.Types.I# ww1_s9lI ->
      case w1_s9lF of { Person ww3_s9lM ww4_s9lN ww5_s9lO ->
      Main.$w$cshowsPrec ww1_s9lI ww3_s9lM ww4_s9lN ww5_s9lO
      }
      }

-- RHS size: {terms: 10, types: 6, coercions: 0, joins: 0/0}
Main.$fShowPerson_$cshow :: Person -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U(U),1*U(U),U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a6S2 [Occ=Once] :: Person) ->
                 Main.$fShowPerson_$cshowsPrec
                   Main.$fShowPerson7 x_a6S2 (GHC.Types.[] @ Char)}]
Main.$fShowPerson_$cshow
  = \ (x_a6S2 :: Person) ->
      case x_a6S2 of { Person ww1_s9lM ww2_s9lN ww3_s9lO ->
      Main.$w$cshowsPrec
        0# ww1_s9lM ww2_s9lN ww3_s9lO (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
Main.$fShowPerson1 :: Person -> ShowS
[GblId,
 Arity=1,
 Str=<S,1*U(1*U(U),1*U(U),U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 60 0}]
Main.$fShowPerson1
  = \ (w_s9lF :: Person) ->
      case w_s9lF of { Person ww1_s9lM ww2_s9lN ww3_s9lO ->
      Main.$w$cshowsPrec 0# ww1_s9lM ww2_s9lN ww3_s9lO
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
Main.$fShowPerson_$cshowList :: [Person] -> ShowS
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Main.$fShowPerson_$cshowList
  = GHC.Show.showList__ @ Person Main.$fShowPerson1

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Main.$fShowPerson [InlPrag=CONLIKE] :: Show Person
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Person
                       Main.$fShowPerson_$cshowsPrec
                       Main.$fShowPerson_$cshow
                       Main.$fShowPerson_$cshowList]
Main.$fShowPerson
  = GHC.Show.C:Show
      @ Person
      Main.$fShowPerson_$cshowsPrec
      Main.$fShowPerson_$cshow
      Main.$fShowPerson_$cshowList

-- RHS size: {terms: 18, types: 5, coercions: 0, joins: 0/0}
Main.$fEqGender_$c== :: Gender -> Gender -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d6Re [Occ=Once!] :: Gender)
                 (ds1_d6Rf [Occ=Once*!] :: Gender) ->
                 case ds_d6Re of {
                   M ->
                     case ds1_d6Rf of {
                       M -> GHC.Types.True;
                       F -> GHC.Types.False
                     };
                   F ->
                     case ds1_d6Rf of {
                       M -> GHC.Types.False;
                       F -> GHC.Types.True
                     }
                 }}]
Main.$fEqGender_$c==
  = \ (ds_d6Re :: Gender) (ds1_d6Rf :: Gender) ->
      case ds_d6Re of {
        M ->
          case ds1_d6Rf of {
            M -> GHC.Types.True;
            F -> GHC.Types.False
          };
        F ->
          case ds1_d6Rf of {
            M -> GHC.Types.False;
            F -> GHC.Types.True
          }
      }

-- RHS size: {terms: 18, types: 5, coercions: 0, joins: 0/0}
Main.$fEqGender_$c/= :: Gender -> Gender -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a6po [Occ=Once!] :: Gender)
                 (b_a6pp [Occ=Once*!] :: Gender) ->
                 case a_a6po of {
                   M ->
                     case b_a6pp of {
                       M -> GHC.Types.False;
                       F -> GHC.Types.True
                     };
                   F ->
                     case b_a6pp of {
                       M -> GHC.Types.True;
                       F -> GHC.Types.False
                     }
                 }}]
Main.$fEqGender_$c/=
  = \ (a_a6po :: Gender) (b_a6pp :: Gender) ->
      case a_a6po of {
        M ->
          case b_a6pp of {
            M -> GHC.Types.False;
            F -> GHC.Types.True
          };
        F ->
          case b_a6pp of {
            M -> GHC.Types.True;
            F -> GHC.Types.False
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Main.$fEqGender [InlPrag=CONLIKE] :: Eq Gender
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: Gender
                        Main.$fEqGender_$c==
                        Main.$fEqGender_$c/=]
Main.$fEqGender
  = GHC.Classes.C:Eq
      @ Gender Main.$fEqGender_$c== Main.$fEqGender_$c/=

-- RHS size: {terms: 16, types: 5, coercions: 0, joins: 0/0}
Main.$fOrdGender_$c< :: Gender -> Gender -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a6pg [Occ=Once!] :: Gender)
                 (b_a6ph [Occ=Once*] :: Gender) ->
                 case a_a6pg of {
                   M ->
                     case b_a6ph of {
                       M -> GHC.Types.False;
                       F -> GHC.Types.True
                     };
                   F -> case b_a6ph of { __DEFAULT -> GHC.Types.False }
                 }}]
Main.$fOrdGender_$c<
  = \ (a_a6pg :: Gender) (b_a6ph :: Gender) ->
      case a_a6pg of {
        M ->
          case b_a6ph of {
            M -> GHC.Types.False;
            F -> GHC.Types.True
          };
        F -> case b_a6ph of { __DEFAULT -> GHC.Types.False }
      }

-- RHS size: {terms: 18, types: 5, coercions: 0, joins: 0/0}
Main.$fOrdGender_$ccompare :: Gender -> Gender -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a6pe [Occ=Once!] :: Gender)
                 (b_a6pf [Occ=Once*!] :: Gender) ->
                 case a_a6pe of {
                   M ->
                     case b_a6pf of {
                       M -> GHC.Types.EQ;
                       F -> GHC.Types.LT
                     };
                   F ->
                     case b_a6pf of {
                       M -> GHC.Types.GT;
                       F -> GHC.Types.EQ
                     }
                 }}]
Main.$fOrdGender_$ccompare
  = \ (a_a6pe :: Gender) (b_a6pf :: Gender) ->
      case a_a6pe of {
        M ->
          case b_a6pf of {
            M -> GHC.Types.EQ;
            F -> GHC.Types.LT
          };
        F ->
          case b_a6pf of {
            M -> GHC.Types.GT;
            F -> GHC.Types.EQ
          }
      }

-- RHS size: {terms: 16, types: 5, coercions: 0, joins: 0/0}
Main.$fOrdGender_$c<= :: Gender -> Gender -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a6pi [Occ=Once*] :: Gender)
                 (b_a6pj [Occ=Once!] :: Gender) ->
                 case b_a6pj of {
                   M ->
                     case a_a6pi of {
                       M -> GHC.Types.True;
                       F -> GHC.Types.False
                     };
                   F -> case a_a6pi of { __DEFAULT -> GHC.Types.True }
                 }}]
Main.$fOrdGender_$c<=
  = \ (a_a6pi :: Gender) (b_a6pj :: Gender) ->
      case b_a6pj of {
        M ->
          case a_a6pi of {
            M -> GHC.Types.True;
            F -> GHC.Types.False
          };
        F -> case a_a6pi of { __DEFAULT -> GHC.Types.True }
      }

-- RHS size: {terms: 11, types: 4, coercions: 0, joins: 0/0}
Main.$fOrdGender_$cmax :: Gender -> Gender -> Gender
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a6Sj [Occ=Once*] :: Gender)
                 (y_a6Sk [Occ=Once!] :: Gender) ->
                 case y_a6Sk of {
                   M -> x_a6Sj;
                   F -> case x_a6Sj of { __DEFAULT -> Main.F }
                 }}]
Main.$fOrdGender_$cmax
  = \ (x_a6Sj :: Gender) (y_a6Sk :: Gender) ->
      case y_a6Sk of {
        M -> x_a6Sj;
        F -> case x_a6Sj of { __DEFAULT -> Main.F }
      }

-- RHS size: {terms: 16, types: 5, coercions: 0, joins: 0/0}
Main.$fOrdGender_$c>= :: Gender -> Gender -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a6pm [Occ=Once!] :: Gender)
                 (b_a6pn [Occ=Once*] :: Gender) ->
                 case a_a6pm of {
                   M ->
                     case b_a6pn of {
                       M -> GHC.Types.True;
                       F -> GHC.Types.False
                     };
                   F -> case b_a6pn of { __DEFAULT -> GHC.Types.True }
                 }}]
Main.$fOrdGender_$c>=
  = \ (a_a6pm :: Gender) (b_a6pn :: Gender) ->
      case a_a6pm of {
        M ->
          case b_a6pn of {
            M -> GHC.Types.True;
            F -> GHC.Types.False
          };
        F -> case b_a6pn of { __DEFAULT -> GHC.Types.True }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
Main.$fOrdGender_$c> :: Gender -> Gender -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (a_a6pk [Occ=Once] :: Gender)
                 (b_a6pl [Occ=Once] :: Gender) ->
                 Main.$fOrdGender_$c< b_a6pl a_a6pk}]
Main.$fOrdGender_$c>
  = \ (a_a6pk :: Gender) (b_a6pl :: Gender) ->
      Main.$fOrdGender_$c< b_a6pl a_a6pk

-- RHS size: {terms: 11, types: 4, coercions: 0, joins: 0/0}
Main.$fOrdGender_$cmin :: Gender -> Gender -> Gender
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a6Ss [Occ=Once*] :: Gender)
                 (y_a6St [Occ=Once!] :: Gender) ->
                 case y_a6St of {
                   M -> case x_a6Ss of { __DEFAULT -> Main.M };
                   F -> x_a6Ss
                 }}]
Main.$fOrdGender_$cmin
  = \ (x_a6Ss :: Gender) (y_a6St :: Gender) ->
      case y_a6St of {
        M -> case x_a6Ss of { __DEFAULT -> Main.M };
        F -> x_a6Ss
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
Main.$fOrdGender [InlPrag=CONLIKE] :: Ord Gender
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: Gender
                         Main.$fEqGender
                         Main.$fOrdGender_$ccompare
                         Main.$fOrdGender_$c<
                         Main.$fOrdGender_$c<=
                         Main.$fOrdGender_$c>
                         Main.$fOrdGender_$c>=
                         Main.$fOrdGender_$cmax
                         Main.$fOrdGender_$cmin]
Main.$fOrdGender
  = GHC.Classes.C:Ord
      @ Gender
      Main.$fEqGender
      Main.$fOrdGender_$ccompare
      Main.$fOrdGender_$c<
      Main.$fOrdGender_$c<=
      Main.$fOrdGender_$c>
      Main.$fOrdGender_$c>=
      Main.$fOrdGender_$cmax
      Main.$fOrdGender_$cmin

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
gender :: Person -> Gender
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLS),1*U(A,A,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d6QS [Occ=Once!] :: Person) ->
                 case ds_d6QS of
                 { Person _ [Occ=Dead] _ [Occ=Dead] ds3_d6QV [Occ=Once] ->
                 ds3_d6QV
                 }}]
gender
  = \ (ds_d6QS :: Person) ->
      case ds_d6QS of { Person ds1_d6QT ds2_d6QU ds3_d6QV -> ds3_d6QV }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
weight :: Person -> Double
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,1*U(U),A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d6QO [Occ=Once!] :: Person) ->
                 case ds_d6QO of
                 { Person _ [Occ=Dead] ds2_d6QQ [Occ=Once] _ [Occ=Dead] ->
                 ds2_d6QQ
                 }}]
weight
  = \ (ds_d6QO :: Person) ->
      case ds_d6QO of { Person ds1_d6QP ds2_d6QQ ds3_d6QR -> ds2_d6QQ }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
height :: Person -> Double
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(1*U(U),A,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d6QK [Occ=Once!] :: Person) ->
                 case ds_d6QK of
                 { Person ds1_d6QL [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                 ds1_d6QL
                 }}]
height
  = \ (ds_d6QK :: Person) ->
      case ds_d6QK of { Person ds1_d6QL ds2_d6QM ds3_d6QN -> ds1_d6QL }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc_r9Gh :: [Char]
[GblId]
loc_r9Gh = GHC.CString.unpackCString# Main.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$trModule2 = "Main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc1_r9Gi :: [Char]
[GblId]
loc1_r9Gi = GHC.CString.unpackCString# Main.$trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
loc2_r9Gj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs]
loc2_r9Gj = "example.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc3_r9Gk :: [Char]
[GblId]
loc3_r9Gk = GHC.CString.unpackCString# loc2_r9Gj

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc4_r9Gl :: Int
[GblId, Caf=NoCafRefs, Str=m]
loc4_r9Gl = GHC.Types.I# 5#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc5_r9Gm :: Int
[GblId, Caf=NoCafRefs, Str=m]
loc5_r9Gm = GHC.Types.I# 31#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc6_r9Gn :: Int
[GblId, Caf=NoCafRefs, Str=m]
loc6_r9Gn = GHC.Types.I# 35#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIP_r9Go :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs]
$dIP_r9Go = "error"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$dIP1_r9Gp :: [Char]
[GblId]
$dIP1_r9Gp = GHC.CString.unpackCString# $dIP_r9Go

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
$dIP2_r9Gq :: GHC.Stack.Types.SrcLoc
[GblId, Str=m]
$dIP2_r9Gq
  = GHC.Stack.Types.SrcLoc
      loc_r9Gh
      loc1_r9Gi
      loc3_r9Gk
      loc4_r9Gl
      loc5_r9Gm
      loc4_r9Gl
      loc6_r9Gn

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
$dIP3_r9Gr :: GHC.Stack.Types.CallStack
[GblId, Str=m2]
$dIP3_r9Gr
  = GHC.Stack.Types.PushCallStack
      $dIP1_r9Gp $dIP2_r9Gq GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_r9Gs :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs]
lvl_r9Gs = ") is outside of enumeration's range (0,"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_r9Gt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs]
lvl1_r9Gt = ")"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_r9Gu :: [Char]
[GblId]
lvl2_r9Gu = GHC.CString.unpackCString# lvl1_r9Gt

-- RHS size: {terms: 9, types: 10, coercions: 0, joins: 0/0}
lvl3_r9Gv :: [Char]
[GblId]
lvl3_r9Gv
  = case GHC.Show.$wshowSignedInt 0# 1# lvl2_r9Gu of
    { (# ww5_a6W2, ww6_a6W3 #) ->
    GHC.Types.: @ Char ww5_a6W2 ww6_a6W3
    }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
lvl4_r9Gw :: [Char]
[GblId]
lvl4_r9Gw = GHC.CString.unpackAppendCString# lvl_r9Gs lvl3_r9Gv

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl5_r9Gx :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs]
lvl5_r9Gx = "toEnum{Gender}: tag ("#

-- RHS size: {terms: 14, types: 13, coercions: 4, joins: 0/0}
Main.$wlvl [InlPrag=[0]] :: GHC.Prim.Int# -> Gender
[GblId, Arity=1, Str=<B,U>x]
Main.$wlvl
  = \ (ww_s9lU :: GHC.Prim.Int#) ->
      error
        @ 'GHC.Types.LiftedRep
        @ Gender
        ($dIP3_r9Gr
         `cast` (Sym
                   (GHC.Classes.N:IP[0] <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R#
                    ((?callStack::GHC.Stack.Types.CallStack) :: Constraint)))
        (GHC.CString.unpackAppendCString#
           lvl5_r9Gx
           (case GHC.Show.$wshowSignedInt 0# ww_s9lU lvl4_r9Gw of
            { (# ww5_a6W2, ww6_a6W3 #) ->
            GHC.Types.: @ Char ww5_a6W2 ww6_a6W3
            }))

-- RHS size: {terms: 21, types: 6, coercions: 0, joins: 0/0}
Main.$w$ctoEnum [InlPrag=[0]] :: GHC.Prim.Int# -> Gender
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 85 0}]
Main.$w$ctoEnum
  = \ (ww_s9m0 :: GHC.Prim.Int#) ->
      case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# ww_s9m0 0#) of {
        False -> Main.$wlvl ww_s9m0;
        True ->
          case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# ww_s9m0 1#) of {
            False -> Main.$wlvl ww_s9m0;
            True -> GHC.Prim.tagToEnum# @ Gender ww_s9m0
          }
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
Main.$fEnumGender_$ctoEnum [InlPrag=INLINE[0]] :: Int -> Gender
[GblId,
 Arity=1,
 Str=<S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9lX [Occ=Once!] :: Int) ->
                 case w_s9lX of { GHC.Types.I# ww1_s9m0 [Occ=Once] ->
                 Main.$w$ctoEnum ww1_s9m0
                 }}]
Main.$fEnumGender_$ctoEnum
  = \ (w_s9lX :: Int) ->
      case w_s9lX of { GHC.Types.I# ww1_s9m0 ->
      Main.$w$ctoEnum ww1_s9m0
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl6_r9Gy :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs]
lvl6_r9Gy
  = "succ{Gender}: tried to take `succ' of last tag in enumeration"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7_r9Gz :: [Char]
[GblId]
lvl7_r9Gz = GHC.CString.unpackCString# lvl6_r9Gy

-- RHS size: {terms: 3, types: 2, coercions: 4, joins: 0/0}
Main.$fEnumGender4 :: Gender
[GblId, Str=x]
Main.$fEnumGender4
  = error
      @ 'GHC.Types.LiftedRep
      @ Gender
      ($dIP3_r9Gr
       `cast` (Sym
                 (GHC.Classes.N:IP[0] <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: (GHC.Stack.Types.CallStack :: *)
                  ~R#
                  ((?callStack::GHC.Stack.Types.CallStack) :: Constraint)))
      lvl7_r9Gz

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
Main.$fEnumGender_$csucc :: Gender -> Gender
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a6p1 [Occ=Once!] :: Gender) ->
                 case a_a6p1 of {
                   M -> Main.F;
                   F -> Main.$fEnumGender4
                 }}]
Main.$fEnumGender_$csucc
  = \ (a_a6p1 :: Gender) ->
      case a_a6p1 of {
        M -> Main.F;
        F -> Main.$fEnumGender4
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl8_r9GA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs]
lvl8_r9GA
  = "pred{Gender}: tried to take `pred' of first tag in enumeration"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl9_r9GB :: [Char]
[GblId]
lvl9_r9GB = GHC.CString.unpackCString# lvl8_r9GA

-- RHS size: {terms: 3, types: 2, coercions: 4, joins: 0/0}
Main.$fEnumGender3 :: Gender
[GblId, Str=x]
Main.$fEnumGender3
  = error
      @ 'GHC.Types.LiftedRep
      @ Gender
      ($dIP3_r9Gr
       `cast` (Sym
                 (GHC.Classes.N:IP[0] <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: (GHC.Stack.Types.CallStack :: *)
                  ~R#
                  ((?callStack::GHC.Stack.Types.CallStack) :: Constraint)))
      lvl9_r9GB

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
Main.$fEnumGender_$cpred :: Gender -> Gender
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a6p3 [Occ=Once!] :: Gender) ->
                 case a_a6p3 of {
                   M -> Main.$fEnumGender3;
                   F -> Main.M
                 }}]
Main.$fEnumGender_$cpred
  = \ (a_a6p3 :: Gender) ->
      case a_a6p3 of {
        M -> Main.$fEnumGender3;
        F -> Main.M
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl10_r9GC :: Int
[GblId, Caf=NoCafRefs, Str=m]
lvl10_r9GC = GHC.Types.I# 1#

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
Main.$fEnumGender_$cfromEnum :: Gender -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a6pc [Occ=Once!] :: Gender) ->
                 case a_a6pc of {
                   M -> GHC.Types.I# 0#;
                   F -> GHC.Types.I# 1#
                 }}]
Main.$fEnumGender_$cfromEnum
  = \ (a_a6pc :: Gender) ->
      case a_a6pc of {
        M -> Main.$fShowPerson7;
        F -> lvl10_r9GC
      }

Rec {
-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
Main.$fEnumGender_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [Gender]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2]
Main.$fEnumGender_go2
  = \ (x_a6Xw :: GHC.Prim.Int#) ->
      GHC.Types.:
        @ Gender
        (GHC.Prim.tagToEnum# @ Gender x_a6Xw)
        (case x_a6Xw of wild_X49 {
           __DEFAULT -> Main.$fEnumGender_go2 (GHC.Prim.+# wild_X49 1#);
           1# -> GHC.Types.[] @ Gender
         })
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$fEnumGender2 :: [Gender]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
Main.$fEnumGender2 = Main.$fEnumGender_go2 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$fEnumGender1 :: [Gender]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
Main.$fEnumGender1 = Main.$fEnumGender_go2 1#

-- RHS size: {terms: 7, types: 2, coercions: 0, joins: 0/0}
Main.$fEnumGender_$cenumFrom :: Gender -> [Gender]
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
Main.$fEnumGender_$cenumFrom
  = \ (a_a6p6 :: Gender) ->
      case a_a6p6 of {
        M -> Main.$fEnumGender2;
        F -> Main.$fEnumGender1
      }

-- RHS size: {terms: 251, types: 110, coercions: 0, joins: 2/14}
Main.$fEnumGender_$cenumFromThen :: Gender -> Gender -> [Gender]
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,1*U><S,1*U>]
Main.$fEnumGender_$cenumFromThen
  = \ (a_a6p8 :: Gender) (b_a6p9 :: Gender) ->
      join {
        $j_s8Yz [Dmd=<C(S),1*C1(U)>] :: GHC.Prim.Int# -> [Gender]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s8Yz (a#_a6pa [OS=OneShot]
                   :: GHC.Prim.Int#
                   Unf=OtherCon [])
          = join {
              $j1_s8Yx [Dmd=<C(S),1*C1(U)>] :: GHC.Prim.Int# -> [Gender]
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $j1_s8Yx (b#_a6pb [OS=OneShot]
                          :: GHC.Prim.Int#
                          Unf=OtherCon [])
                = case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># a#_a6pa b#_a6pb)
                  of {
                    False ->
                      case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# b#_a6pb a#_a6pa) of {
                        False ->
                          case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># 1# b#_a6pb) of {
                            False ->
                              GHC.Types.:
                                @ Gender
                                (GHC.Prim.tagToEnum# @ Gender a#_a6pa)
                                (let {
                                   delta_a96T [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   delta_a96T = GHC.Prim.-# b#_a6pb a#_a6pa } in
                                 let {
                                   y'_a96V [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   y'_a96V = GHC.Prim.-# 1# delta_a96T } in
                                 letrec {
                                   go_dn_a96W [Occ=LoopBreaker] :: GHC.Prim.Int# -> [Gender]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_a96W
                                     = \ (x_a96X :: GHC.Prim.Int#) ->
                                         case GHC.Prim.tagToEnum#
                                                @ Bool (GHC.Prim.<# x_a96X y'_a96V)
                                         of {
                                           False ->
                                             GHC.Types.:
                                               @ Gender
                                               (GHC.Prim.tagToEnum# @ Gender x_a96X)
                                               (go_dn_a96W (GHC.Prim.+# x_a96X delta_a96T));
                                           True ->
                                             GHC.Types.:
                                               @ Gender
                                               (GHC.Prim.tagToEnum# @ Gender x_a96X)
                                               (GHC.Types.[] @ Gender)
                                         }; } in
                                 go_dn_a96W b#_a6pb);
                            True ->
                              case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># 1# a#_a6pa) of {
                                False ->
                                  GHC.Types.:
                                    @ Gender
                                    (GHC.Prim.tagToEnum# @ Gender a#_a6pa)
                                    (GHC.Types.[] @ Gender);
                                True -> GHC.Types.[] @ Gender
                              }
                          };
                        True ->
                          case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# 1# b#_a6pb) of {
                            False ->
                              GHC.Types.:
                                @ Gender
                                (GHC.Prim.tagToEnum# @ Gender a#_a6pa)
                                (let {
                                   delta_a97l [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   delta_a97l = GHC.Prim.-# b#_a6pb a#_a6pa } in
                                 let {
                                   y'_a97n [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   y'_a97n = GHC.Prim.-# 1# delta_a97l } in
                                 letrec {
                                   go_up_a97o [Occ=LoopBreaker] :: GHC.Prim.Int# -> [Gender]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_a97o
                                     = \ (x_a97p :: GHC.Prim.Int#) ->
                                         case GHC.Prim.tagToEnum#
                                                @ Bool (GHC.Prim.># x_a97p y'_a97n)
                                         of {
                                           False ->
                                             GHC.Types.:
                                               @ Gender
                                               (GHC.Prim.tagToEnum# @ Gender x_a97p)
                                               (go_up_a97o (GHC.Prim.+# x_a97p delta_a97l));
                                           True ->
                                             GHC.Types.:
                                               @ Gender
                                               (GHC.Prim.tagToEnum# @ Gender x_a97p)
                                               (GHC.Types.[] @ Gender)
                                         }; } in
                                 go_up_a97o b#_a6pb);
                            True ->
                              case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# 1# a#_a6pa) of {
                                False ->
                                  GHC.Types.:
                                    @ Gender
                                    (GHC.Prim.tagToEnum# @ Gender a#_a6pa)
                                    (GHC.Types.[] @ Gender);
                                True -> GHC.Types.[] @ Gender
                              }
                          }
                      };
                    True ->
                      case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# b#_a6pb a#_a6pa) of {
                        False ->
                          case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># 0# b#_a6pb) of {
                            False ->
                              GHC.Types.:
                                @ Gender
                                (GHC.Prim.tagToEnum# @ Gender a#_a6pa)
                                (let {
                                   delta_a96T [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   delta_a96T = GHC.Prim.-# b#_a6pb a#_a6pa } in
                                 let {
                                   y'_a96V [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   y'_a96V = GHC.Prim.-# 0# delta_a96T } in
                                 letrec {
                                   go_dn_a96W [Occ=LoopBreaker] :: GHC.Prim.Int# -> [Gender]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_a96W
                                     = \ (x_a96X :: GHC.Prim.Int#) ->
                                         case GHC.Prim.tagToEnum#
                                                @ Bool (GHC.Prim.<# x_a96X y'_a96V)
                                         of {
                                           False ->
                                             GHC.Types.:
                                               @ Gender
                                               (GHC.Prim.tagToEnum# @ Gender x_a96X)
                                               (go_dn_a96W (GHC.Prim.+# x_a96X delta_a96T));
                                           True ->
                                             GHC.Types.:
                                               @ Gender
                                               (GHC.Prim.tagToEnum# @ Gender x_a96X)
                                               (GHC.Types.[] @ Gender)
                                         }; } in
                                 go_dn_a96W b#_a6pb);
                            True ->
                              case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># 0# a#_a6pa) of {
                                False ->
                                  GHC.Types.:
                                    @ Gender
                                    (GHC.Prim.tagToEnum# @ Gender a#_a6pa)
                                    (GHC.Types.[] @ Gender);
                                True -> GHC.Types.[] @ Gender
                              }
                          };
                        True ->
                          case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# 0# b#_a6pb) of {
                            False ->
                              GHC.Types.:
                                @ Gender
                                (GHC.Prim.tagToEnum# @ Gender a#_a6pa)
                                (let {
                                   delta_a97l [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   delta_a97l = GHC.Prim.-# b#_a6pb a#_a6pa } in
                                 let {
                                   y'_a97n [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   y'_a97n = GHC.Prim.-# 0# delta_a97l } in
                                 letrec {
                                   go_up_a97o [Occ=LoopBreaker] :: GHC.Prim.Int# -> [Gender]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_a97o
                                     = \ (x_a97p :: GHC.Prim.Int#) ->
                                         case GHC.Prim.tagToEnum#
                                                @ Bool (GHC.Prim.># x_a97p y'_a97n)
                                         of {
                                           False ->
                                             GHC.Types.:
                                               @ Gender
                                               (GHC.Prim.tagToEnum# @ Gender x_a97p)
                                               (go_up_a97o (GHC.Prim.+# x_a97p delta_a97l));
                                           True ->
                                             GHC.Types.:
                                               @ Gender
                                               (GHC.Prim.tagToEnum# @ Gender x_a97p)
                                               (GHC.Types.[] @ Gender)
                                         }; } in
                                 go_up_a97o b#_a6pb);
                            True ->
                              case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# 0# a#_a6pa) of {
                                False ->
                                  GHC.Types.:
                                    @ Gender
                                    (GHC.Prim.tagToEnum# @ Gender a#_a6pa)
                                    (GHC.Types.[] @ Gender);
                                True -> GHC.Types.[] @ Gender
                              }
                          }
                      }
                  } } in
            case b_a6p9 of {
              M -> jump $j1_s8Yx 0#;
              F -> jump $j1_s8Yx 1#
            } } in
      case a_a6p8 of {
        M -> jump $j_s8Yz 0#;
        F -> jump $j_s8Yz 1#
      }

Rec {
-- RHS size: {terms: 31, types: 9, coercions: 0, joins: 0/0}
Main.$fEnumGender_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [Gender]
[GblId, Arity=1, Str=<L,U>m2]
Main.$fEnumGender_go1
  = \ (x_a6Xw :: GHC.Prim.Int#) ->
      GHC.Types.:
        @ Gender
        (case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# x_a6Xw 0#) of {
           False -> Main.$wlvl x_a6Xw;
           True ->
             case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# x_a6Xw 1#) of {
               False -> Main.$wlvl x_a6Xw;
               True -> GHC.Prim.tagToEnum# @ Gender x_a6Xw
             }
         })
        (case x_a6Xw of wild_X4h {
           __DEFAULT -> Main.$fEnumGender_go1 (GHC.Prim.+# wild_X4h 1#);
           0# -> GHC.Types.[] @ Gender
         })
end Rec }

Rec {
-- RHS size: {terms: 31, types: 9, coercions: 0, joins: 0/0}
Main.$fEnumGender_go [Occ=LoopBreaker] :: GHC.Prim.Int# -> [Gender]
[GblId, Arity=1, Str=<L,U>m2]
Main.$fEnumGender_go
  = \ (x_a6Xw :: GHC.Prim.Int#) ->
      GHC.Types.:
        @ Gender
        (case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# x_a6Xw 0#) of {
           False -> Main.$wlvl x_a6Xw;
           True ->
             case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# x_a6Xw 1#) of {
               False -> Main.$wlvl x_a6Xw;
               True -> GHC.Prim.tagToEnum# @ Gender x_a6Xw
             }
         })
        (case x_a6Xw of wild_X4h {
           __DEFAULT -> Main.$fEnumGender_go (GHC.Prim.+# wild_X4h 1#);
           1# -> GHC.Types.[] @ Gender
         })
end Rec }

-- RHS size: {terms: 36, types: 14, coercions: 0, joins: 1/1}
Main.$fEnumGender_$cenumFromTo :: Gender -> Gender -> [Gender]
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [34 72] 132 0}]
Main.$fEnumGender_$cenumFromTo
  = \ (x_a6T8 :: Gender) (y_a6T9 :: Gender) ->
      join {
        $j_s8YC [Dmd=<C(S),1*C1(U)>] :: GHC.Prim.Int# -> [Gender]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s8YC (a#_a6pd [OS=OneShot]
                   :: GHC.Prim.Int#
                   Unf=OtherCon [])
          = case y_a6T9 of {
              M ->
                case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># a#_a6pd 0#) of {
                  False -> Main.$fEnumGender_go1 a#_a6pd;
                  True -> GHC.Types.[] @ Gender
                };
              F ->
                case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># a#_a6pd 1#) of {
                  False -> Main.$fEnumGender_go a#_a6pd;
                  True -> GHC.Types.[] @ Gender
                }
            } } in
      case x_a6T8 of {
        M -> jump $j_s8YC 0#;
        F -> jump $j_s8YC 1#
      }

-- RHS size: {terms: 537, types: 174, coercions: 0, joins: 2/14}
Main.$fEnumGender_$cenumFromThenTo
  :: Gender -> Gender -> Gender -> [Gender]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>]
Main.$fEnumGender_$cenumFromThenTo
  = \ (x1_a6SM :: Gender) (x2_a6SN :: Gender) (y_a6SO :: Gender) ->
      join {
        $j_s8YH [Dmd=<C(S),1*C1(U)>] :: GHC.Prim.Int# -> [Gender]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s8YH (a#_a6pd [OS=OneShot]
                   :: GHC.Prim.Int#
                   Unf=OtherCon [])
          = join {
              $j1_s8YF [Dmd=<C(S),1*C1(U)>] :: GHC.Prim.Int# -> [Gender]
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $j1_s8YF (a#1_X6uA [OS=OneShot]
                          :: GHC.Prim.Int#
                          Unf=OtherCon [])
                = case y_a6SO of {
                    M ->
                      case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# a#1_X6uA a#_a6pd)
                      of {
                        False ->
                          case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># 0# a#1_X6uA) of {
                            False ->
                              GHC.Types.:
                                @ Gender
                                (case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# a#_a6pd 0#) of {
                                   False -> Main.$wlvl a#_a6pd;
                                   True ->
                                     case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# a#_a6pd 1#) of {
                                       False -> Main.$wlvl a#_a6pd;
                                       True -> GHC.Prim.tagToEnum# @ Gender a#_a6pd
                                     }
                                 })
                                (let {
                                   delta_a96T [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   delta_a96T = GHC.Prim.-# a#1_X6uA a#_a6pd } in
                                 let {
                                   y'_a96V [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   y'_a96V = GHC.Prim.-# 0# delta_a96T } in
                                 letrec {
                                   go_dn_a96W [Occ=LoopBreaker] :: GHC.Prim.Int# -> [Gender]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_a96W
                                     = \ (x_a96X :: GHC.Prim.Int#) ->
                                         case GHC.Prim.tagToEnum#
                                                @ Bool (GHC.Prim.<# x_a96X y'_a96V)
                                         of {
                                           False ->
                                             GHC.Types.:
                                               @ Gender
                                               (case GHC.Prim.tagToEnum#
                                                       @ Bool (GHC.Prim.>=# x_a96X 0#)
                                                of {
                                                  False -> Main.$wlvl x_a96X;
                                                  True ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ Bool (GHC.Prim.<=# x_a96X 1#)
                                                    of {
                                                      False -> Main.$wlvl x_a96X;
                                                      True -> GHC.Prim.tagToEnum# @ Gender x_a96X
                                                    }
                                                })
                                               (go_dn_a96W (GHC.Prim.+# x_a96X delta_a96T));
                                           True ->
                                             GHC.Types.:
                                               @ Gender
                                               (case GHC.Prim.tagToEnum#
                                                       @ Bool (GHC.Prim.>=# x_a96X 0#)
                                                of {
                                                  False -> Main.$wlvl x_a96X;
                                                  True ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ Bool (GHC.Prim.<=# x_a96X 1#)
                                                    of {
                                                      False -> Main.$wlvl x_a96X;
                                                      True -> GHC.Prim.tagToEnum# @ Gender x_a96X
                                                    }
                                                })
                                               (GHC.Types.[] @ Gender)
                                         }; } in
                                 go_dn_a96W a#1_X6uA);
                            True ->
                              case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># 0# a#_a6pd) of {
                                False ->
                                  GHC.Types.:
                                    @ Gender
                                    (case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# a#_a6pd 0#) of {
                                       False -> Main.$wlvl a#_a6pd;
                                       True ->
                                         case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# a#_a6pd 1#)
                                         of {
                                           False -> Main.$wlvl a#_a6pd;
                                           True -> GHC.Prim.tagToEnum# @ Gender a#_a6pd
                                         }
                                     })
                                    (GHC.Types.[] @ Gender);
                                True -> GHC.Types.[] @ Gender
                              }
                          };
                        True ->
                          case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# 0# a#1_X6uA) of {
                            False ->
                              GHC.Types.:
                                @ Gender
                                (case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# a#_a6pd 0#) of {
                                   False -> Main.$wlvl a#_a6pd;
                                   True ->
                                     case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# a#_a6pd 1#) of {
                                       False -> Main.$wlvl a#_a6pd;
                                       True -> GHC.Prim.tagToEnum# @ Gender a#_a6pd
                                     }
                                 })
                                (let {
                                   delta_a97l [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   delta_a97l = GHC.Prim.-# a#1_X6uA a#_a6pd } in
                                 let {
                                   y'_a97n [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   y'_a97n = GHC.Prim.-# 0# delta_a97l } in
                                 letrec {
                                   go_up_a97o [Occ=LoopBreaker] :: GHC.Prim.Int# -> [Gender]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_a97o
                                     = \ (x_a97p :: GHC.Prim.Int#) ->
                                         case GHC.Prim.tagToEnum#
                                                @ Bool (GHC.Prim.># x_a97p y'_a97n)
                                         of {
                                           False ->
                                             GHC.Types.:
                                               @ Gender
                                               (case GHC.Prim.tagToEnum#
                                                       @ Bool (GHC.Prim.>=# x_a97p 0#)
                                                of {
                                                  False -> Main.$wlvl x_a97p;
                                                  True ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ Bool (GHC.Prim.<=# x_a97p 1#)
                                                    of {
                                                      False -> Main.$wlvl x_a97p;
                                                      True -> GHC.Prim.tagToEnum# @ Gender x_a97p
                                                    }
                                                })
                                               (go_up_a97o (GHC.Prim.+# x_a97p delta_a97l));
                                           True ->
                                             GHC.Types.:
                                               @ Gender
                                               (case GHC.Prim.tagToEnum#
                                                       @ Bool (GHC.Prim.>=# x_a97p 0#)
                                                of {
                                                  False -> Main.$wlvl x_a97p;
                                                  True ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ Bool (GHC.Prim.<=# x_a97p 1#)
                                                    of {
                                                      False -> Main.$wlvl x_a97p;
                                                      True -> GHC.Prim.tagToEnum# @ Gender x_a97p
                                                    }
                                                })
                                               (GHC.Types.[] @ Gender)
                                         }; } in
                                 go_up_a97o a#1_X6uA);
                            True ->
                              case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# 0# a#_a6pd) of {
                                False ->
                                  GHC.Types.:
                                    @ Gender
                                    (case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# a#_a6pd 0#) of {
                                       False -> Main.$wlvl a#_a6pd;
                                       True ->
                                         case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# a#_a6pd 1#)
                                         of {
                                           False -> Main.$wlvl a#_a6pd;
                                           True -> GHC.Prim.tagToEnum# @ Gender a#_a6pd
                                         }
                                     })
                                    (GHC.Types.[] @ Gender);
                                True -> GHC.Types.[] @ Gender
                              }
                          }
                      };
                    F ->
                      case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# a#1_X6uA a#_a6pd)
                      of {
                        False ->
                          case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># 1# a#1_X6uA) of {
                            False ->
                              GHC.Types.:
                                @ Gender
                                (case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# a#_a6pd 0#) of {
                                   False -> Main.$wlvl a#_a6pd;
                                   True ->
                                     case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# a#_a6pd 1#) of {
                                       False -> Main.$wlvl a#_a6pd;
                                       True -> GHC.Prim.tagToEnum# @ Gender a#_a6pd
                                     }
                                 })
                                (let {
                                   delta_a96T [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   delta_a96T = GHC.Prim.-# a#1_X6uA a#_a6pd } in
                                 let {
                                   y'_a96V [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   y'_a96V = GHC.Prim.-# 1# delta_a96T } in
                                 letrec {
                                   go_dn_a96W [Occ=LoopBreaker] :: GHC.Prim.Int# -> [Gender]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_a96W
                                     = \ (x_a96X :: GHC.Prim.Int#) ->
                                         case GHC.Prim.tagToEnum#
                                                @ Bool (GHC.Prim.<# x_a96X y'_a96V)
                                         of {
                                           False ->
                                             GHC.Types.:
                                               @ Gender
                                               (case GHC.Prim.tagToEnum#
                                                       @ Bool (GHC.Prim.>=# x_a96X 0#)
                                                of {
                                                  False -> Main.$wlvl x_a96X;
                                                  True ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ Bool (GHC.Prim.<=# x_a96X 1#)
                                                    of {
                                                      False -> Main.$wlvl x_a96X;
                                                      True -> GHC.Prim.tagToEnum# @ Gender x_a96X
                                                    }
                                                })
                                               (go_dn_a96W (GHC.Prim.+# x_a96X delta_a96T));
                                           True ->
                                             GHC.Types.:
                                               @ Gender
                                               (case GHC.Prim.tagToEnum#
                                                       @ Bool (GHC.Prim.>=# x_a96X 0#)
                                                of {
                                                  False -> Main.$wlvl x_a96X;
                                                  True ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ Bool (GHC.Prim.<=# x_a96X 1#)
                                                    of {
                                                      False -> Main.$wlvl x_a96X;
                                                      True -> GHC.Prim.tagToEnum# @ Gender x_a96X
                                                    }
                                                })
                                               (GHC.Types.[] @ Gender)
                                         }; } in
                                 go_dn_a96W a#1_X6uA);
                            True ->
                              case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.># 1# a#_a6pd) of {
                                False ->
                                  GHC.Types.:
                                    @ Gender
                                    (case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# a#_a6pd 0#) of {
                                       False -> Main.$wlvl a#_a6pd;
                                       True ->
                                         case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# a#_a6pd 1#)
                                         of {
                                           False -> Main.$wlvl a#_a6pd;
                                           True -> GHC.Prim.tagToEnum# @ Gender a#_a6pd
                                         }
                                     })
                                    (GHC.Types.[] @ Gender);
                                True -> GHC.Types.[] @ Gender
                              }
                          };
                        True ->
                          case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# 1# a#1_X6uA) of {
                            False ->
                              GHC.Types.:
                                @ Gender
                                (case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# a#_a6pd 0#) of {
                                   False -> Main.$wlvl a#_a6pd;
                                   True ->
                                     case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# a#_a6pd 1#) of {
                                       False -> Main.$wlvl a#_a6pd;
                                       True -> GHC.Prim.tagToEnum# @ Gender a#_a6pd
                                     }
                                 })
                                (let {
                                   delta_a97l [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   delta_a97l = GHC.Prim.-# a#1_X6uA a#_a6pd } in
                                 let {
                                   y'_a97n [Dmd=<S,U>] :: GHC.Prim.Int#
                                   [LclId]
                                   y'_a97n = GHC.Prim.-# 1# delta_a97l } in
                                 letrec {
                                   go_up_a97o [Occ=LoopBreaker] :: GHC.Prim.Int# -> [Gender]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_a97o
                                     = \ (x_a97p :: GHC.Prim.Int#) ->
                                         case GHC.Prim.tagToEnum#
                                                @ Bool (GHC.Prim.># x_a97p y'_a97n)
                                         of {
                                           False ->
                                             GHC.Types.:
                                               @ Gender
                                               (case GHC.Prim.tagToEnum#
                                                       @ Bool (GHC.Prim.>=# x_a97p 0#)
                                                of {
                                                  False -> Main.$wlvl x_a97p;
                                                  True ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ Bool (GHC.Prim.<=# x_a97p 1#)
                                                    of {
                                                      False -> Main.$wlvl x_a97p;
                                                      True -> GHC.Prim.tagToEnum# @ Gender x_a97p
                                                    }
                                                })
                                               (go_up_a97o (GHC.Prim.+# x_a97p delta_a97l));
                                           True ->
                                             GHC.Types.:
                                               @ Gender
                                               (case GHC.Prim.tagToEnum#
                                                       @ Bool (GHC.Prim.>=# x_a97p 0#)
                                                of {
                                                  False -> Main.$wlvl x_a97p;
                                                  True ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ Bool (GHC.Prim.<=# x_a97p 1#)
                                                    of {
                                                      False -> Main.$wlvl x_a97p;
                                                      True -> GHC.Prim.tagToEnum# @ Gender x_a97p
                                                    }
                                                })
                                               (GHC.Types.[] @ Gender)
                                         }; } in
                                 go_up_a97o a#1_X6uA);
                            True ->
                              case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# 1# a#_a6pd) of {
                                False ->
                                  GHC.Types.:
                                    @ Gender
                                    (case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.>=# a#_a6pd 0#) of {
                                       False -> Main.$wlvl a#_a6pd;
                                       True ->
                                         case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# a#_a6pd 1#)
                                         of {
                                           False -> Main.$wlvl a#_a6pd;
                                           True -> GHC.Prim.tagToEnum# @ Gender a#_a6pd
                                         }
                                     })
                                    (GHC.Types.[] @ Gender);
                                True -> GHC.Types.[] @ Gender
                              }
                          }
                      }
                  } } in
            case x2_a6SN of {
              M -> jump $j1_s8YF 0#;
              F -> jump $j1_s8YF 1#
            } } in
      case x1_a6SM of {
        M -> jump $j_s8YH 0#;
        F -> jump $j_s8YH 1#
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
Main.$fEnumGender [InlPrag=CONLIKE] :: Enum Gender
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: Gender
                       Main.$fEnumGender_$csucc
                       Main.$fEnumGender_$cpred
                       Main.$fEnumGender_$ctoEnum
                       Main.$fEnumGender_$cfromEnum
                       Main.$fEnumGender_$cenumFrom
                       Main.$fEnumGender_$cenumFromThen
                       Main.$fEnumGender_$cenumFromTo
                       Main.$fEnumGender_$cenumFromThenTo]
Main.$fEnumGender
  = GHC.Enum.C:Enum
      @ Gender
      Main.$fEnumGender_$csucc
      Main.$fEnumGender_$cpred
      Main.$fEnumGender_$ctoEnum
      Main.$fEnumGender_$cfromEnum
      Main.$fEnumGender_$cenumFrom
      Main.$fEnumGender_$cenumFromThen
      Main.$fEnumGender_$cenumFromTo
      Main.$fEnumGender_$cenumFromThenTo

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$trModule3 = GHC.Types.TrNameS Main.$trModule4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$trModule1 = GHC.Types.TrNameS Main.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule = GHC.Types.Module Main.$trModule3 Main.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r9GD :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1]
$krep_r9GD
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcDouble (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$tcGender2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Main.$tcGender2 = "Gender"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$tcGender1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$tcGender1 = GHC.Types.TrNameS Main.$tcGender2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Main.$tcGender :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Main.$tcGender
  = GHC.Types.TyCon
      3493401709015755305##
      14790052897006053540##
      Main.$trModule
      Main.$tcGender1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Main.$tc'F1 [InlPrag=[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1]
Main.$tc'F1
  = GHC.Types.KindRepTyConApp
      Main.$tcGender (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$tc'M2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$tc'M2 = "'M"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$tc'M1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$tc'M1 = GHC.Types.TrNameS Main.$tc'M2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Main.$tc'M :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Main.$tc'M
  = GHC.Types.TyCon
      17785842457694484716##
      136877336669905235##
      Main.$trModule
      Main.$tc'M1
      0#
      Main.$tc'F1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$tc'F3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Main.$tc'F3 = "'F"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$tc'F2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$tc'F2 = GHC.Types.TrNameS Main.$tc'F3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Main.$tc'F :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Main.$tc'F
  = GHC.Types.TyCon
      14632208746320539249##
      2459861030131864685##
      Main.$trModule
      Main.$tc'F2
      0#
      Main.$tc'F1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$tcPerson2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Main.$tcPerson2 = "Person"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$tcPerson1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$tcPerson1 = GHC.Types.TrNameS Main.$tcPerson2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Main.$tcPerson :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Main.$tcPerson
  = GHC.Types.TyCon
      16014444715325524089##
      17456607533897091165##
      Main.$trModule
      Main.$tcPerson1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r9GE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1]
$krep1_r9GE
  = GHC.Types.KindRepTyConApp
      Main.$tcPerson (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r9GF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4]
$krep2_r9GF = GHC.Types.KindRepFun Main.$tc'F1 $krep1_r9GE

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_r9GG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4]
$krep3_r9GG = GHC.Types.KindRepFun $krep_r9GD $krep2_r9GF

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Main.$tc'Person1 [InlPrag=[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4]
Main.$tc'Person1 = GHC.Types.KindRepFun $krep_r9GD $krep3_r9GG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Main.$tc'Person3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Main.$tc'Person3 = "'Person"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.$tc'Person2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$tc'Person2 = GHC.Types.TrNameS Main.$tc'Person3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Main.$tc'Person :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
Main.$tc'Person
  = GHC.Types.TyCon
      9426666986912956455##
      3294253457948602618##
      Main.$trModule
      Main.$tc'Person2
      0#
      Main.$tc'Person1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main4 :: Double
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.main4 = GHC.Types.D# 1.0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main3 :: Double
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.main3 = GHC.Types.D# 100.0##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
Main.main2 :: [Double]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
Main.main2
  = GHC.Real.numericEnumFromTo
      @ Double
      GHC.Classes.$fOrdDouble
      GHC.Float.$fFractionalDouble
      Main.main4
      Main.main3

Rec {
-- RHS size: {terms: 40, types: 25, coercions: 0, joins: 0/2}
Main.main_go [Occ=LoopBreaker] :: [Double] -> [Person]
[GblId, Arity=1, Str=<S,1*U>]
Main.main_go
  = \ (ds_a3OI :: [Double]) ->
      case ds_a3OI of {
        [] -> GHC.Types.[] @ Person;
        : y_a3ON ys_a3OO ->
          let {
            z_X3Tj :: [Person]
            [LclId]
            z_X3Tj = Main.main_go ys_a3OO } in
          letrec {
            go2_X3Tm [Occ=LoopBreaker] :: [Double] -> [Person]
            [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
            go2_X3Tm
              = \ (ds1_X3To :: [Double]) ->
                  case ds1_X3To of {
                    [] -> z_X3Tj;
                    : y1_X3Tw ys1_X3Ty ->
                      GHC.Types.:
                        @ Person
                        (Main.Person y_a3ON y1_X3Tw Main.M)
                        (GHC.Types.:
                           @ Person
                           (Main.Person y_a3ON y1_X3Tw Main.F)
                           (GHC.Types.:
                              @ Person
                              (Main.Person y_a3ON y1_X3Tw Main.F)
                              (GHC.Types.:
                                 @ Person (Main.Person y_a3ON y1_X3Tw Main.M) (go2_X3Tm ys1_X3Ty))))
                  }; } in
          go2_X3Tm Main.main2
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main_rs :: [Person]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
Main.main_rs = Main.main_go Main.main2

Rec {
-- RHS size: {terms: 37, types: 37, coercions: 0, joins: 1/1}
go_r9GH
  :: [Person]
     -> (Data.IntMap.Internal.IntMap [Person]
         -> Data.IntMap.Internal.IntMap [Person])
     -> Data.IntMap.Internal.IntMap [Person]
     -> Data.IntMap.Internal.IntMap [Person]
[GblId, Arity=3, Caf=NoCafRefs, Str=<S,1*U><C(S),1*C1(U)><L,U>]
go_r9GH
  = \ (ds_a7yx :: [Person])
      (eta_a7yy
         :: Data.IntMap.Internal.IntMap [Person]
            -> Data.IntMap.Internal.IntMap [Person])
      (eta1_a7yz :: Data.IntMap.Internal.IntMap [Person]) ->
      case ds_a7yx of {
        [] -> eta_a7yy eta1_a7yz;
        : y_a7yE ys_a7yF ->
          go_r9GH
            ys_a7yF
            (\ (z_a7yH [OS=OneShot] :: Data.IntMap.Internal.IntMap [Person]) ->
               case y_a7yE of wild1_X1c { Person ds1_d6QT ds2_d6QU ds3_d6QV ->
               join {
                 $j_s8YM [Dmd=<C(S),1*C1(U)>]
                   :: GHC.Prim.Int# -> Data.IntMap.Internal.IntMap [Person]
                 [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
                 $j_s8YM (a#_a6pd [OS=OneShot]
                            :: GHC.Prim.Int#
                            Unf=OtherCon [])
                   = case Data.IntMap.Internal.$winsertWithKey
                            @ [Person]
                            (Job.withGroups1 @ Person)
                            a#_a6pd
                            (GHC.Types.: @ Person wild1_X1c (GHC.Types.[] @ Person))
                            z_a7yH
                     of vx_a7yI
                     { __DEFAULT ->
                     eta_a7yy vx_a7yI
                     } } in
               case ds3_d6QV of {
                 M -> jump $j_s8YM 0#;
                 F -> jump $j_s8YM 1#
               }
               })
            eta1_a7yz
      }
end Rec }

Rec {
-- RHS size: {terms: 66, types: 55, coercions: 0, joins: 1/4}
go1_r9GI
  :: Data.IntMap.Internal.IntMap [Person]
     -> Data.IntMap.Internal.IntMap (Person -> Double)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>]
go1_r9GI
  = \ (ds_a3Np :: Data.IntMap.Internal.IntMap [Person]) ->
      case ds_a3Np of {
        Data.IntMap.Internal.Bin dt_a3Ns dt1_a3Nt l_a3Nu r_a3Nv ->
          case go1_r9GI l_a3Nu of dt2_a3Nx { __DEFAULT ->
          case go1_r9GI r_a3Nv of dt3_a3Ny { __DEFAULT ->
          Data.IntMap.Internal.Bin
            @ (Person -> Double) dt_a3Ns dt1_a3Nt dt2_a3Nx dt3_a3Ny
          }
          };
        Data.IntMap.Internal.Tip dt_a3NA x_a3NB ->
          let {
            lvl15_s9tj :: Double
            [LclId]
            lvl15_s9tj
              = let {
                  xs_s8UB [Dmd=<S,U>] :: [Double]
                  [LclId]
                  xs_s8UB = map @ Person @ Double weight x_a3NB } in
                let {
                  lvl16_s9ti [Dmd=<S(S),U(U)>] :: Int
                  [LclId]
                  lvl16_s9ti
                    = case GHC.List.$wlenAcc @ Double xs_s8UB 0# of v_B2 { __DEFAULT ->
                      GHC.Types.I# v_B2
                      } } in
                joinrec {
                  $wgo_s9mE [InlPrag=[0], Occ=LoopBreaker]
                    :: [Double] -> GHC.Prim.Double# -> Double
                  [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,U>m, Unf=OtherCon []]
                  $wgo_s9mE (w_s9my :: [Double]) (ww_s9mC :: GHC.Prim.Double#)
                    = case w_s9my of {
                        [] ->
                          case lvl16_s9ti of { GHC.Types.I# v1_B2 ->
                          case GHC.Prim./## ww_s9mC (GHC.Prim.int2Double# v1_B2)
                          of wild4_a7wV
                          { __DEFAULT ->
                          GHC.Types.D# wild4_a7wV
                          }
                          };
                        : y_a3ON ys_a3OO ->
                          case y_a3ON of { GHC.Types.D# y1_a7xm ->
                          jump $wgo_s9mE ys_a3OO (GHC.Prim.+## ww_s9mC y1_a7xm)
                          }
                      }; } in
                jump $wgo_s9mE xs_s8UB 0.0## } in
          Data.IntMap.Internal.Tip
            @ (Person -> Double) dt_a3NA (\ _ [Occ=Dead] -> lvl15_s9tj);
        Data.IntMap.Internal.Nil ->
          Data.IntMap.Internal.Nil @ (Person -> Double)
      }
end Rec }

-- RHS size: {terms: 5, types: 5, coercions: 0, joins: 0/0}
lvl11_r9GJ :: Data.IntMap.Internal.IntMap (Person -> Double)
[GblId]
lvl11_r9GJ
  = go1_r9GI
      (go_r9GH
         Main.main_rs
         (id @ (Data.IntMap.Internal.IntMap [Person]))
         (Data.IntMap.Internal.Nil @ [Person]))

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl12_r9GK :: Person -> Double
[GblId]
lvl12_r9GK
  = Data.IntMap.Internal.$w! @ (Person -> Double) lvl11_r9GJ 1#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl13_r9GL :: Person -> Double
[GblId]
lvl13_r9GL
  = Data.IntMap.Internal.$w! @ (Person -> Double) lvl11_r9GJ 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl14_r9GM :: [Char]
[GblId, Caf=NoCafRefs, Str=m2]
lvl14_r9GM
  = GHC.Types.: @ Char GHC.Show.$fShow(,)2 (GHC.Types.[] @ Char)

Rec {
-- RHS size: {terms: 71, types: 46, coercions: 0, joins: 0/0}
Main.main5 [Occ=LoopBreaker]
  :: [Person]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<S,1*U><S,U>]
Main.main5
  = \ (ds_a3OI :: [Person])
      (eta_B1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
      case ds_a3OI of {
        [] -> (# eta_B1, GHC.Tuple.() #);
        : y_a3ON ys_a3OO ->
          case GHC.IO.Handle.Text.hPutStr2
                 GHC.IO.Handle.FD.stdout
                 (GHC.Types.:
                    @ Char
                    GHC.Show.$fShow(,)4
                    (case y_a3ON of wild1_X1e { Person ds1_d6QL ds2_d6QM ds3_d6QN ->
                     case ds1_d6QL of { GHC.Types.D# ww1_a6Uc ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       GHC.Show.$fShow(,)1
                       ww1_a6Uc
                       (GHC.Types.:
                          @ Char
                          GHC.Show.showList__1
                          (case ds2_d6QM of { GHC.Types.D# x_a7wP ->
                           case ds3_d6QN of {
                             M ->
                               case lvl13_r9GL wild1_X1e of { GHC.Types.D# y1_a7wT ->
                               case GHC.Prim./## x_a7wP y1_a7wT of wild5_a7wV { __DEFAULT ->
                               GHC.Show.$fShow(,)_$sgo1
                                 lvl14_r9GM
                                 (GHC.Float.$w$sshowSignedFloat
                                    GHC.Float.$fShowDouble2 GHC.Show.$fShow(,)1 wild5_a7wV)
                                 (GHC.Types.[] @ ShowS)
                               }
                               };
                             F ->
                               case lvl12_r9GK wild1_X1e of { GHC.Types.D# y1_a7wT ->
                               case GHC.Prim./## x_a7wP y1_a7wT of wild5_a7wV { __DEFAULT ->
                               GHC.Show.$fShow(,)_$sgo1
                                 lvl14_r9GM
                                 (GHC.Float.$w$sshowSignedFloat
                                    GHC.Float.$fShowDouble2 GHC.Show.$fShow(,)1 wild5_a7wV)
                                 (GHC.Types.[] @ ShowS)
                               }
                               }
                           }
                           }))
                     }
                     }))
                 GHC.Types.True
                 eta_B1
          of
          { (# ipv_a7uy, ipv1_a7uz #) ->
          Main.main5 ys_a3OO ipv_a7uy
          }
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Main.main1 = Main.main5 Main.main_rs

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main :: IO ()
[GblId,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main1
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: ((GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)) :: *)
                          ~R#
                          (IO () :: *))}]
main
  = Main.main1
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: ((GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)) :: *)
               ~R#
               (IO () :: *))

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
Main.main6
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Main.main6
  = GHC.TopHandler.runMainIO1
      @ ()
      (Main.main1
       `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
               :: ((GHC.Prim.State# GHC.Prim.RealWorld
                    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)) :: *)
                  ~R#
                  (IO () :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
:Main.main :: IO ()
[GblId,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main6
               `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
                       :: ((GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)) :: *)
                          ~R#
                          (IO () :: *))}]
:Main.main
  = Main.main6
    `cast` (Sym (GHC.Types.N:IO[0] <()>_R)
            :: ((GHC.Prim.State# GHC.Prim.RealWorld
                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)) :: *)
               ~R#
               (IO () :: *))


